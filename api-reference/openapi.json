{
  "openapi": "3.1.0",
  "info": {
    "title": "Sindre API",
    "description": "AI-powered meeting intelligence and task management API. Manage calendar meetings, transcriptions, AI-generated summaries, task extraction, and team insights.",
    "version": "1.0.0",
    "contact": {
      "name": "Sindre Support",
      "email": "support@sindre.com",
      "url": "https://sindre.com"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://sindre.com/terms"
    }
  },
  "servers": [
    {
      "url": "https://api.sindre.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Meetings",
      "description": "Meeting management endpoints for calendar sync, transcription, and AI processing"
    },
    {
      "name": "Tasks",
      "description": "Task management endpoints for AI-extracted and manual tasks"
    },
    {
      "name": "Task Comments",
      "description": "Task comment endpoints for collaboration and discussion"
    },
    {
      "name": "Webhooks",
      "description": "Webhook endpoints for external service integration"
    },
    {
      "name": "Bets",
      "description": "Bet management endpoints for strategic initiatives and tracking"
    },
    {
      "name": "Insights",
      "description": "Insight management endpoints for AI-extracted and manual insights from meetings"
    },
    {
      "name": "Organizations",
      "description": "Organization management endpoints for companies, clients, partners, and external entities"
    },
    {
      "name": "People",
      "description": "People management endpoints for contacts and individuals within organizations and workspaces"
    }
  ],
  "paths": {
    "/api/meetings": {
      "get": {
        "summary": "Get Meeting",
        "description": "Retrieve a specific meeting by its event ID.",
        "operationId": "getMeeting",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The meeting/event ID to retrieve",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Event ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid Supabase user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-meeting-with-attendees": {
      "get": {
        "summary": "Get Meeting with Attendees",
        "description": "Retrieve a meeting including all attendee information.",
        "operationId": "getMeetingWithAttendees",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The meeting/event ID to retrieve",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting with attendees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingWithAttendees"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-completed-meetings": {
      "get": {
        "summary": "List Completed Meetings",
        "description": "Get paginated list of completed meetings with summaries.",
        "operationId": "getCompletedMeetings",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of meetings to return (max 100)",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of meetings to skip for pagination",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Completed meetings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletedMeetingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-future-meetings": {
      "get": {
        "summary": "List Future Meetings",
        "description": "Get upcoming meetings from calendar sync.",
        "operationId": "getFutureMeetings",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "nbDays",
            "in": "query",
            "description": "Number of days ahead to look for meetings",
            "schema": {
              "type": "integer",
              "default": 7
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Future meetings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/update-language": {
      "patch": {
        "summary": "Update Meeting Language",
        "description": "Change the language setting for a meeting's processing.",
        "operationId": "updateMeetingLanguage",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["eventId", "language"],
                "properties": {
                  "eventId": {
                    "type": "integer",
                    "description": "The meeting ID to update"
                  },
                  "language": {
                    "type": "string",
                    "description": "Language code (e.g., 'en', 'es', 'fr', 'de')",
                    "examples": ["en", "es", "fr", "de"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Language updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/update-summary": {
      "patch": {
        "summary": "Update Meeting Summary",
        "description": "Update the AI-generated summary and action points.",
        "operationId": "updateMeetingSummary",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["eventId", "newSummary"],
                "properties": {
                  "eventId": {
                    "type": "integer",
                    "description": "The meeting ID to update"
                  },
                  "newSummary": {
                    "$ref": "#/components/schemas/MeetingSummary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Summary updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/reprocess-meeting": {
      "post": {
        "summary": "Reprocess Meeting",
        "description": "Trigger reprocessing of a meeting with updated AI models.",
        "operationId": "reprocessMeeting",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["botId"],
                "properties": {
                  "botId": {
                    "type": "string",
                    "description": "The Recall bot ID for the meeting recording"
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Language code for processing (defaults to meeting's current language)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reprocessing initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/update-transcript": {
      "post": {
        "summary": "Update Meeting Transcript",
        "description": "Update the transcript for a meeting.",
        "operationId": "updateMeetingTranscript",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["botId", "transcript", "languageCode"],
                "properties": {
                  "botId": {
                    "type": "string",
                    "description": "The Recall bot ID for the meeting"
                  },
                  "transcript": {
                    "$ref": "#/components/schemas/Transcript"
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "Language code for the transcript"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transcript updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/share-meeting": {
      "post": {
        "summary": "Share Meeting",
        "description": "Share a meeting with team members or spaces.",
        "operationId": "shareMeeting",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["eventId", "userIds"],
                "properties": {
                  "eventId": {
                    "type": "integer",
                    "description": "The meeting ID to share"
                  },
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of user IDs to share with"
                  },
                  "spaceId": {
                    "type": "string",
                    "description": "Optional space ID for organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meeting shared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/delete-meeting": {
      "delete": {
        "summary": "Delete Meeting",
        "description": "Permanently delete a meeting and all associated data.",
        "operationId": "deleteMeeting",
        "tags": ["Meetings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["eventId"],
                "properties": {
                  "eventId": {
                    "type": "integer",
                    "description": "The meeting ID to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meeting deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-team-members": {
      "get": {
        "summary": "Get Team Members",
        "description": "Get list of team members for sharing meetings.",
        "operationId": "getTeamMembers",
        "tags": ["Meetings"],
        "responses": {
          "200": {
            "description": "Team members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-attendees": {
      "get": {
        "summary": "Get Meeting Attendees",
        "description": "Get attendee list for a specific meeting.",
        "operationId": "getMeetingAttendees",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The meeting/event ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendeesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-events-data": {
      "get": {
        "summary": "Get Events Data by Bot IDs",
        "description": "Retrieve meeting information for multiple bot IDs.",
        "operationId": "getEventsData",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "botIds",
            "in": "query",
            "description": "Comma-separated list of bot IDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Events data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-person-meetings": {
      "get": {
        "summary": "Get Person Meetings",
        "description": "Get all meetings for a specific person by bot IDs.",
        "operationId": "getPersonMeetings",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "botIds",
            "in": "query",
            "description": "Comma-separated list of bot IDs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person meetings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/meetings/get-insight-meeting": {
      "get": {
        "summary": "Get Meeting for Insights",
        "description": "Get meeting data specifically for insights generation.",
        "operationId": "getInsightMeeting",
        "tags": ["Meetings"],
        "parameters": [
          {
            "name": "sourceBotId",
            "in": "query",
            "description": "The bot ID for insights analysis",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight meeting retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhook": {
      "post": {
        "summary": "Webhook Endpoint",
        "description": "Receive webhooks from external services",
        "operationId": "webhook",
        "tags": ["Webhooks"],
        "requestBody": {
          "description": "Webhook payload",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          }
        }
      }
    },
    "/api/tasks": {
      "get": {
        "summary": "List Tasks",
        "description": "Retrieve tasks with extensive filtering and sorting options",
        "operationId": "listTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of tasks to return (max 100)",
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of tasks to skip for pagination",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by task status",
            "schema": {
              "type": "string",
              "enum": ["pending", "in_progress", "blocked", "completed", "cancelled"]
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Filter by priority level",
            "schema": {
              "type": "string",
              "enum": ["low", "medium", "high", "critical"]
            }
          },
          {
            "name": "assignee_id",
            "in": "query",
            "description": "Filter tasks assigned to a specific user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "meeting_id",
            "in": "query",
            "description": "Filter tasks from a specific meeting",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "space_id",
            "in": "query",
            "description": "Filter tasks in a specific workspace",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "enum": ["created_at", "due_date", "priority", "title", "status"],
              "default": "created_at"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Task",
        "description": "Create a new task manually. Tasks can also be automatically extracted from meeting transcriptions.",
        "operationId": "createTask",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Clear, actionable task name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Detailed description of what needs to be done"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["pending", "in_progress", "blocked", "completed", "cancelled"],
                    "default": "pending",
                    "description": "Initial task status"
                  },
                  "priority_id": {
                    "type": "string",
                    "default": "2",
                    "description": "Task priority ID: 1=low, 2=medium, 3=high, 4=critical"
                  },
                  "status_id": {
                    "type": "string",
                    "default": "1",
                    "description": "Task status ID: 1=todo, 2=in_progress, 3=completed, etc."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "User ID of the person assigned to this task (use 'sindre' for Sindre assignment)"
                  },
                  "is_sindre_assigned": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether this task is assigned to Sindre AI assistant"
                  },
                  "event_id": {
                    "type": "integer",
                    "description": "ID of the meeting/event this task originated from (if applicable)"
                  },
                  "bot_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of bot IDs associated with this task"
                  },
                  "assigned_to_name": {
                    "type": "string",
                    "description": "Name of the person assigned to this task"
                  },
                  "assigned_to_email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email of the person assigned to this task"
                  },
                  "space_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Workspace/space ID (defaults to user's default space)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Task data is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}": {
      "get": {
        "summary": "Get Task",
        "description": "Retrieve a specific task by its ID with complete details and related information",
        "operationId": "getTask",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "User cannot access task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Task",
        "description": "Update multiple fields of a task at once",
        "operationId": "updateTask",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated task name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Updated task description"
                  },
                  "status_id": {
                    "type": "string",
                    "description": "Updated status ID"
                  },
                  "priority_id": {
                    "type": "string",
                    "description": "Updated priority ID"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "New assignee user ID"
                  },
                  "is_sindre_assigned": {
                    "type": "boolean",
                    "description": "Whether task is assigned to Sindre"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Task",
        "description": "Permanently delete a task. This action cannot be undone.",
        "operationId": "deleteTask",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted successfully"
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "User cannot delete task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/user-tasks": {
      "get": {
        "summary": "Get User Tasks",
        "description": "Retrieve all tasks assigned to the authenticated user",
        "operationId": "getUserTasks",
        "tags": ["Tasks"],
        "responses": {
          "200": {
            "description": "User tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No tasks found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/meeting-tasks": {
      "get": {
        "summary": "Get Meeting Tasks",
        "description": "Retrieve tasks associated with a specific meeting or event",
        "operationId": "getMeetingTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The ID of the event/meeting to retrieve tasks for",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Event ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/space-tasks": {
      "get": {
        "summary": "Get Space Tasks",
        "description": "Retrieve all tasks associated with a specific workspace or space",
        "operationId": "getSpaceTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "spaceId",
            "in": "query",
            "description": "The UUID of the space to retrieve tasks for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Space tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Space ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/bet-tasks": {
      "get": {
        "summary": "Get Bet Tasks",
        "description": "Retrieve all tasks associated with a specific bet or strategic initiative",
        "operationId": "getBetTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "betId",
            "in": "query",
            "description": "The UUID of the bet to retrieve tasks for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bet ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/insight-tasks": {
      "get": {
        "summary": "Get Insight Tasks",
        "description": "Retrieve all tasks connected to a specific insight",
        "operationId": "getInsightTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "insightId",
            "in": "query",
            "description": "The UUID of the insight to retrieve tasks for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Insight ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/unconnected-tasks": {
      "get": {
        "summary": "Get Unconnected Tasks",
        "description": "Retrieve tasks that are not connected to a specific insight",
        "operationId": "getUnconnectedTasks",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "insightId",
            "in": "query",
            "description": "The UUID of the insight to filter against",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optional space ID to scope the search",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unconnected tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/statuses": {
      "get": {
        "summary": "Get Task Statuses",
        "description": "Retrieve all available task statuses",
        "operationId": "getTaskStatuses",
        "tags": ["Tasks"],
        "responses": {
          "200": {
            "description": "Task statuses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/priorities": {
      "get": {
        "summary": "Get Task Priorities",
        "description": "Retrieve all available task priorities",
        "operationId": "getTaskPriorities",
        "tags": ["Tasks"],
        "responses": {
          "200": {
            "description": "Task priorities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskPriority"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/status": {
      "patch": {
        "summary": "Update Task Status",
        "description": "Update the status of a specific task using its status ID",
        "operationId": "updateTaskStatus",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["statusId"],
                "properties": {
                  "statusId": {
                    "type": "string",
                    "description": "The ID of the status to set"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/priority": {
      "patch": {
        "summary": "Update Task Priority",
        "description": "Update the priority of a specific task using its priority ID",
        "operationId": "updateTaskPriority",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["priorityId"],
                "properties": {
                  "priorityId": {
                    "type": "string",
                    "description": "The ID of the priority to set"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task priority updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/assignee": {
      "patch": {
        "summary": "Update Task Assignee",
        "description": "Update the assignee of a specific task",
        "operationId": "updateTaskAssignee",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assigneeId": {
                    "type": "string",
                    "description": "User ID to assign the task to. Use 'sindre' for Sindre assignment, 'null' for unassigned"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task assignee updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Assignee not found in space",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/bet/{betId}": {
      "patch": {
        "summary": "Update Task Bet",
        "description": "Associate a task with a bet or remove bet association",
        "operationId": "updateTaskBet",
        "tags": ["Tasks"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The UUID of the task to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "betId",
            "in": "path",
            "description": "The UUID of the bet to associate with the task (use 'null' to remove association)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task bet updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/find-all-similar-backlog": {
      "post": {
        "summary": "Find Similar Tasks in Backlog",
        "description": "Analyze all tasks in a space/backlog to find similar or duplicate tasks",
        "operationId": "findSimilarTasksInBacklog",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spaceId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the space to analyze (optional, defaults to user's tasks)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Similar task pairs found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarTasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/merge": {
      "put": {
        "summary": "Merge Tasks",
        "description": "Merge two similar tasks into one, combining their descriptions intelligently",
        "operationId": "mergeTasks",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["sourceTaskData", "targetTaskData"],
                "properties": {
                  "sourceTaskData": {
                    "type": "object",
                    "description": "The source task data to merge (will be deleted after merge)",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  },
                  "targetTaskData": {
                    "type": "object",
                    "description": "The target task data to merge into (will be updated with merged content)",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks merged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid task data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/generate-description": {
      "post": {
        "summary": "Generate Task Description",
        "description": "Use AI to generate a detailed description for a task based on its name",
        "operationId": "generateTaskDescription",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["taskData"],
                "properties": {
                  "taskData": {
                    "type": "object",
                    "description": "Task data containing at minimum the task name",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Task name to generate description for"
                      }
                    },
                    "required": ["name"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Description generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "Generated task description"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task data is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/insight-connection": {
      "post": {
        "summary": "Create Insight-Task Connection",
        "description": "Connect a task to one or more insights",
        "operationId": "createInsightTaskConnection",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["taskId", "insightIds"],
                "properties": {
                  "taskId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the task to connect"
                  },
                  "insightIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of insight UUIDs to connect the task to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insight-task connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid task or insight IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/unconnect-tasks-from-insight": {
      "post": {
        "summary": "Disconnect Tasks from Insight",
        "description": "Remove the connection between tasks and an insight",
        "operationId": "disconnectTasksFromInsight",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["taskIds", "insightId"],
                "properties": {
                  "taskIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of task UUIDs to disconnect"
                  },
                  "insightId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the insight to disconnect from"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks disconnected from insight successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid task or insight IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/comments": {
      "get": {
        "summary": "List Task Comments",
        "description": "Get all comments for a specific task, including threaded replies and mentions",
        "operationId": "getTaskComments",
        "tags": ["Task Comments"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to retrieve comments for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskComment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Task Comment",
        "description": "Add a new comment to a task with support for mentions and threading",
        "operationId": "createTaskComment",
        "tags": ["Task Comments"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID to add comment to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "object",
                    "description": "Comment content object (JSONB format)",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["text"]
                      },
                      "text": {
                        "type": "string",
                        "description": "Comment text here (supports Markdown)"
                      }
                    },
                    "required": ["type", "text"]
                  },
                  "mentions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of user IDs mentioned in the comment"
                  },
                  "parent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Parent comment ID for threaded replies"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskComment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid comment data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks/{taskId}/comments/{commentId}": {
      "put": {
        "summary": "Update Task Comment",
        "description": "Update an existing task comment",
        "operationId": "updateTaskComment",
        "tags": ["Task Comments"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["content"],
                "properties": {
                  "content": {
                    "type": "object",
                    "description": "Updated comment content",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["text"]
                      },
                      "text": {
                        "type": "string",
                        "description": "Updated comment text"
                      }
                    },
                    "required": ["type", "text"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskComment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Task Comment",
        "description": "Delete a task comment (soft delete - sets is_deleted flag)",
        "operationId": "deleteTaskComment",
        "tags": ["Task Comments"],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets": {
      "post": {
        "summary": "Create Bet",
        "description": "Create a new bet. If ownBet is true, the current user will be set as the owner.",
        "operationId": "createBet",
        "tags": ["Bets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Bets by IDs",
        "description": "Retrieve specific bets by providing their IDs in the request body.",
        "operationId": "getBetsByIds",
        "tags": ["Bets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["betIds"],
                "properties": {
                  "betIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of bet IDs to retrieve"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Bets not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Bets",
        "description": "Delete multiple bets at once.",
        "operationId": "deleteMultipleBets",
        "tags": ["Bets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["betIds"],
                "properties": {
                  "betIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of bet IDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bets deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/user": {
      "get": {
        "summary": "Get User Bets",
        "description": "Retrieve all bets associated with the current user.",
        "operationId": "getUserBets",
        "tags": ["Bets"],
        "responses": {
          "200": {
            "description": "User bets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bet"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No bets found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/space/{spaceId}": {
      "get": {
        "summary": "Get Space Bets",
        "description": "Retrieve all bets associated with a specific space.",
        "operationId": "getSpaceBets",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "description": "The space ID to retrieve bets for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Space bets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bet"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No bets found for this space",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/statuses": {
      "get": {
        "summary": "Get Available Statuses",
        "description": "Retrieve all available bet statuses.",
        "operationId": "getBetStatuses",
        "tags": ["Bets"],
        "responses": {
          "200": {
            "description": "Bet statuses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BetStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/{betId}": {
      "get": {
        "summary": "Get Bet",
        "description": "Retrieve a specific bet by its ID.",
        "operationId": "getBet",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Bet",
        "description": "Update bet properties.",
        "operationId": "updateBet",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bet updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Bet",
        "description": "Permanently delete a bet. This action cannot be undone.",
        "operationId": "deleteBet",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/{betId}/status/{statusId}": {
      "patch": {
        "summary": "Update Bet Status",
        "description": "Update the status of a specific bet.",
        "operationId": "updateBetStatus",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "statusId",
            "in": "path",
            "description": "The new status ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/{betId}/owner/{ownerId}": {
      "patch": {
        "summary": "Update Bet Owner",
        "description": "Update the owner of a specific bet.",
        "operationId": "updateBetOwner",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ownerId",
            "in": "path",
            "description": "The new owner user ID (use 'null' to remove owner)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet owner updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bets/{betId}/done": {
      "patch": {
        "summary": "Mark Bet as Done",
        "description": "Quickly mark a bet as completed by setting its status to completed.",
        "operationId": "markBetDone",
        "tags": ["Bets"],
        "parameters": [
          {
            "name": "betId",
            "in": "path",
            "description": "The bet ID to mark as done",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet marked as done successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bet"
                }
              }
            }
          },
          "404": {
            "description": "Bet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights": {
      "get": {
        "summary": "Get User Insights",
        "description": "Retrieve all insights accessible to the authenticated user, including insights from their spaces, sorted by creation date (newest first).",
        "operationId": "getUserInsights",
        "tags": ["Insights"],
        "responses": {
          "200": {
            "description": "Insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Insight",
        "description": "Create a new insight manually. Insights can also be automatically extracted from meeting transcriptions.",
        "operationId": "createInsight",
        "tags": ["Insights"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Clear, descriptive insight name"
                  },
                  "direct_quote": {
                    "type": "string",
                    "description": "Exact quote or direct statement that led to this insight"
                  },
                  "details": {
                    "type": "string",
                    "description": "Detailed description and context for the insight"
                  },
                  "type_id": {
                    "type": "integer",
                    "default": 3,
                    "description": "Insight type ID (1=User Feedback, 2=Performance, 3=Issue, etc.)"
                  },
                  "priority_id": {
                    "type": "integer",
                    "default": 1,
                    "description": "Insight priority ID (1=low, 2=medium, 3=high, 4=critical)"
                  },
                  "status_id": {
                    "type": "integer",
                    "default": 1,
                    "description": "Insight status ID (1=new, 2=reviewed, 3=actioned)"
                  },
                  "person_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the person who provided this insight"
                  },
                  "source_bot_id": {
                    "type": "string",
                    "description": "Bot ID if this insight was extracted from a meeting"
                  },
                  "task_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Task ID to automatically connect this insight to a task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insight created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Insight data is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to create insight",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/{insightId}": {
      "get": {
        "summary": "Get Insight by ID",
        "description": "Retrieve a specific insight by its ID with complete details including connected tasks.",
        "operationId": "getInsightById",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to retrieve (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Insight",
        "description": "Update multiple fields of an insight at once.",
        "operationId": "updateInsight",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to update (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated insight name"
                  },
                  "direct_quote": {
                    "type": "string",
                    "description": "Updated direct quote"
                  },
                  "details": {
                    "type": "string",
                    "description": "Updated insight details"
                  },
                  "type_id": {
                    "type": "integer",
                    "description": "Updated type ID"
                  },
                  "priority_id": {
                    "type": "integer",
                    "description": "Updated priority ID"
                  },
                  "status_id": {
                    "type": "integer",
                    "description": "Updated status ID"
                  },
                  "person_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Updated person ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insight updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Insight",
        "description": "Permanently delete a single insight. This action cannot be undone.",
        "operationId": "deleteInsight",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to delete (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/delete-multiple": {
      "delete": {
        "summary": "Delete Multiple Insights",
        "description": "Permanently delete multiple insights at once. This action cannot be undone.",
        "operationId": "deleteMultipleInsights",
        "tags": ["Insights"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["insightIds"],
                "properties": {
                  "insightIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of insight UUIDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insights deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/task-insights": {
      "get": {
        "summary": "Get Task Insights",
        "description": "Retrieve all insights connected to a specific task.",
        "operationId": "getTaskInsights",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "The UUID of the task to retrieve insights for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Insight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/meeting-insights": {
      "get": {
        "summary": "Get Meeting Insights",
        "description": "Retrieve all insights associated with a specific meeting.",
        "operationId": "getMeetingInsights",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "meetingBotId",
            "in": "query",
            "description": "The bot ID associated with the meeting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Insight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Meeting bot ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/unconnected-insights": {
      "get": {
        "summary": "Get Unconnected Insights",
        "description": "Retrieve insights that are not connected to a specific task, useful for creating new connections.",
        "operationId": "getUnconnectedInsights",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "The UUID of the task to filter against",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optional space ID to scope the search (if not provided, searches user's insights)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unconnected insights retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Insight"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Task ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/types": {
      "get": {
        "summary": "Get Insight Types",
        "description": "Retrieve all available insight types for categorization.",
        "operationId": "getInsightTypes",
        "tags": ["Insights"],
        "responses": {
          "200": {
            "description": "Insight types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsightType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/priorities": {
      "get": {
        "summary": "Get Insight Priorities",
        "description": "Retrieve all available insight priorities.",
        "operationId": "getInsightPriorities",
        "tags": ["Insights"],
        "responses": {
          "200": {
            "description": "Insight priorities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsightPriority"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/statuses": {
      "get": {
        "summary": "Get Insight Statuses",
        "description": "Retrieve all available insight statuses.",
        "operationId": "getInsightStatuses",
        "tags": ["Insights"],
        "responses": {
          "200": {
            "description": "Insight statuses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsightStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/{insightId}/type/{typeId}": {
      "put": {
        "summary": "Update Insight Type",
        "description": "Update the type of a specific insight using its type ID.",
        "operationId": "updateInsightType",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to update (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeId",
            "in": "path",
            "description": "The type ID to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/{insightId}/priority/{priorityId}": {
      "put": {
        "summary": "Update Insight Priority",
        "description": "Update the priority of a specific insight using its priority ID.",
        "operationId": "updateInsightPriority",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to update (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "priorityId",
            "in": "path",
            "description": "The priority ID to set (1=low, 2=medium, 3=high, 4=critical)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight priority updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/{insightId}/status/{statusId}": {
      "put": {
        "summary": "Update Insight Status",
        "description": "Update the status of a specific insight using its status ID.",
        "operationId": "updateInsightStatus",
        "tags": ["Insights"],
        "parameters": [
          {
            "name": "insightId",
            "in": "path",
            "description": "The insight ID to update (UUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "statusId",
            "in": "path",
            "description": "The status ID to set (1=new, 2=reviewed, 3=actioned)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            }
          },
          "404": {
            "description": "Insight not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/task-connection": {
      "post": {
        "summary": "Create Task-Insight Connection",
        "description": "Connect insights to one or more tasks to make insights actionable.",
        "operationId": "createTaskInsightConnection",
        "tags": ["Insights"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["insightId", "taskIds"],
                "properties": {
                  "insightId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the insight to connect"
                  },
                  "taskIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of task UUIDs to connect the insight to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task-insight connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid insight or task IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/insights/unconnect-insights-from-task": {
      "post": {
        "summary": "Disconnect Insights from Task",
        "description": "Remove the connection between insights and a task.",
        "operationId": "disconnectInsightsFromTask",
        "tags": ["Insights"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["insightIds", "taskId"],
                "properties": {
                  "insightIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of insight UUIDs to disconnect"
                  },
                  "taskId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the task to disconnect from"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insights disconnected from task successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid insight or task IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "get": {
        "summary": "List Organizations",
        "description": "Retrieve all organizations that the authenticated user has access to within their spaces, sorted by creation date (newest first).",
        "operationId": "listOrganizations",
        "tags": ["Organizations"],
        "responses": {
          "200": {
            "description": "Organizations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid Supabase user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Organization",
        "description": "Create a new organization manually or through automated extraction from meetings.",
        "operationId": "createOrganization",
        "tags": ["Organizations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Organization name (company, client, partner, etc.)"
                  },
                  "type_id": {
                    "type": "integer",
                    "default": 1,
                    "description": "Organization type ID: 1=Company, 2=Client, 3=Partner, 4=Vendor, etc."
                  },
                  "domain": {
                    "type": "string",
                    "description": "Organization's primary domain (e.g., 'acme.com')"
                  },
                  "source": {
                    "type": "object",
                    "description": "Source information tracking where this organization was discovered",
                    "properties": {
                      "platform": {
                        "type": "string",
                        "enum": ["meeting_extraction", "manual", "import"],
                        "description": "Source platform"
                      },
                      "meeting_id": {
                        "type": "string",
                        "description": "Meeting UUID if extracted from meeting"
                      },
                      "extracted_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Extraction timestamp"
                      },
                      "created_by": {
                        "type": "string",
                        "description": "User identifier for manual creation"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid organization data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Invalid Supabase user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}": {
      "get": {
        "summary": "Get Organization",
        "description": "Retrieve a specific organization by its ID with complete details and relationships.",
        "operationId": "getOrganization",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The organization ID to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Invalid Supabase user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Organization",
        "description": "Update an existing organization's details.",
        "operationId": "updateOrganization",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The organization ID to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated organization name"
                  },
                  "type_id": {
                    "type": "integer",
                    "description": "Updated organization type ID"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Updated domain name"
                  },
                  "source": {
                    "type": "object",
                    "description": "Updated source tracking information",
                    "properties": {
                      "platform": {
                        "type": "string",
                        "enum": ["meeting_extraction", "manual", "import"]
                      },
                      "meeting_id": {
                        "type": "string"
                      },
                      "extracted_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid organization data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Organization",
        "description": "Permanently delete an organization. This action cannot be undone.",
        "operationId": "deleteOrganization",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The organization ID to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/types": {
      "get": {
        "summary": "Get Organization Types",
        "description": "Retrieve all available organization types for categorization.",
        "operationId": "getOrganizationTypes",
        "tags": ["Organizations"],
        "responses": {
          "200": {
            "description": "Organization types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTypesResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - Database connection error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}/people": {
      "get": {
        "summary": "Get Organization People",
        "description": "Retrieve all people associated with a specific organization.",
        "operationId": "getOrganizationPeople",
        "tags": ["Organizations"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The organization ID to retrieve people for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization people retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPeopleResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Organization not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Meeting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique meeting identifier"
          },
          "calendar_event_title": {
            "type": "string",
            "description": "Meeting title from calendar event"
          },
          "recall_bot_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of bot IDs used for recording"
          },
          "start_date_time": {
            "type": "string",
            "format": "date-time",
            "description": "Meeting start time"
          },
          "end_date_time": {
            "type": "string",
            "format": "date-time",
            "description": "Meeting end time"
          },
          "time_zone": {
            "type": "string",
            "description": "Meeting timezone"
          },
          "meeting_completed": {
            "type": "boolean",
            "description": "Whether the meeting has ended"
          },
          "meeting_processed": {
            "type": "boolean",
            "description": "Whether AI processing is complete"
          },
          "is_transcript_ready": {
            "type": "boolean",
            "description": "Whether transcript is available"
          },
          "meeting_summary_and_action_points": {
            "$ref": "#/components/schemas/MeetingSummary"
          },
          "transcript": {
            "$ref": "#/components/schemas/Transcript"
          },
          "meeting_language": {
            "type": "string",
            "description": "Language code for the meeting"
          },
          "space_id": {
            "type": "string",
            "format": "uuid",
            "description": "Workspace/team ID"
          },
          "user_calendar_sync_id": {
            "type": "string",
            "description": "Calendar sync identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MeetingWithAttendees": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Meeting"
          },
          {
            "type": "object",
            "properties": {
              "attendees": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Attendee"
                }
              }
            }
          }
        ]
      },
      "MeetingSummary": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "Meeting summary text"
          },
          "action_items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of action items"
          }
        }
      },
      "Transcript": {
        "type": "object",
        "properties": {
          "speakers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Speaker"
            }
          }
        }
      },
      "Speaker": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Speaker name"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptSegment"
            }
          }
        }
      },
      "TranscriptSegment": {
        "type": "object",
        "properties": {
          "start": {
            "type": "number",
            "description": "Start time in seconds"
          },
          "end": {
            "type": "number",
            "description": "End time in seconds"
          },
          "text": {
            "type": "string",
            "description": "Transcript text"
          }
        }
      },
      "Attendee": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Attendee email"
          },
          "name": {
            "type": "string",
            "description": "Attendee name"
          }
        }
      },
      "CompletedMeetingsResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingWithAttendees"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "hasMore": {
            "type": "boolean"
          }
        }
      },
      "TeamMembersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        }
      },
      "AttendeesResponse": {
        "type": "object",
        "properties": {
          "attendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique task identifier"
          },
          "name": {
            "type": "string",
            "description": "Task title/name"
          },
          "description": {
            "type": "string",
            "description": "Detailed task description"
          },
          "event_id": {
            "type": "integer",
            "description": "Associated meeting/event ID"
          },
          "bot_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of bot IDs associated with this task"
          },
          "status_id": {
            "type": "integer",
            "description": "Task status ID"
          },
          "priority_id": {
            "type": "integer",
            "description": "Task priority ID"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/TaskPriority"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of assigned user"
          },
          "is_sindre_assigned": {
            "type": "boolean",
            "description": "Whether task is assigned to Sindre AI"
          },
          "assigned_to_name": {
            "type": "string",
            "description": "Name of assigned person"
          },
          "assigned_to_email": {
            "type": "string",
            "format": "email",
            "description": "Email of assigned person"
          },
          "assignee": {
            "$ref": "#/components/schemas/TaskAssignee"
          },
          "space_id": {
            "type": "string",
            "format": "uuid",
            "description": "Workspace/space ID"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether task is disabled"
          },
          "primary_task": {
            "type": "object",
            "properties": {
              "tasks": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "space_tasks": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string"
              },
              "space_id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "bet_tasks": {
            "type": "object",
            "properties": {
              "bets": {
                "$ref": "#/components/schemas/Bet"
              }
            }
          },
          "insights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskInsight"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TaskStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Status ID"
          },
          "name": {
            "type": "string",
            "description": "Status name",
            "enum": ["pending", "in_progress", "blocked", "completed", "cancelled"]
          },
          "description": {
            "type": "string",
            "description": "Status description"
          }
        }
      },
      "TaskPriority": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Priority ID"
          },
          "name": {
            "type": "string",
            "description": "Priority name",
            "enum": ["low", "medium", "high", "critical"]
          },
          "description": {
            "type": "string",
            "description": "Priority description"
          }
        }
      },
      "TaskAssignee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          },
          "full_name": {
            "type": "string",
            "description": "Full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "Avatar URL"
          }
        }
      },
      "TaskInsight": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Insight ID"
          },
          "name": {
            "type": "string",
            "description": "Insight name"
          },
          "details": {
            "type": "string",
            "description": "Insight details"
          }
        }
      },
      "Bet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique bet identifier"
          },
          "name": {
            "type": "string",
            "description": "Bet name/title"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the bet"
          },
          "status_id": {
            "type": "integer",
            "description": "Reference to the bet status"
          },
          "priority_id": {
            "type": "integer",
            "description": "Reference to the bet priority"
          },
          "icon_id": {
            "type": "integer",
            "description": "Reference to the bet icon"
          },
          "target_date": {
            "type": "string",
            "format": "date-time",
            "description": "Target completion date in ISO 8601 format"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the user who owns this bet",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the bet was created"
          },
          "status": {
            "$ref": "#/components/schemas/BetStatus"
          },
          "icon": {
            "$ref": "#/components/schemas/BetIcon"
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "full_name": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "space": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "space_id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "required": ["id", "name", "status_id", "priority_id", "icon_id", "target_date"]
      },
      "BetStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Status ID"
          },
          "name": {
            "type": "string",
            "description": "Status name",
            "examples": ["active", "completed", "cancelled", "on_hold"]
          },
          "description": {
            "type": "string",
            "description": "Status description"
          }
        },
        "required": ["id", "name"]
      },
      "BetPriority": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Priority ID"
          },
          "name": {
            "type": "string",
            "description": "Priority name",
            "examples": ["low", "medium", "high", "critical"]
          },
          "description": {
            "type": "string",
            "description": "Priority description"
          }
        },
        "required": ["id", "name"]
      },
      "BetIcon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Icon ID"
          },
          "name": {
            "type": "string",
            "description": "Icon name",
            "examples": ["target", "trophy", "flag", "star", "rocket"]
          }
        },
        "required": ["id", "name"]
      },
      "CreateBetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the bet",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the bet"
          },
          "target_date": {
            "type": "string",
            "format": "date-time",
            "description": "Target completion date (ISO 8601 format)"
          },
          "status_id": {
            "type": "integer",
            "description": "Status ID (defaults to 1)",
            "default": 1
          },
          "priority_id": {
            "type": "integer",
            "description": "Priority ID (defaults to 1)",
            "default": 1
          },
          "icon_id": {
            "type": "integer",
            "description": "Icon ID (defaults to 1)",
            "default": 1
          },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID of the bet owner"
          },
          "ownBet": {
            "type": "boolean",
            "description": "If true, sets the current user as the owner"
          },
          "space_id": {
            "type": "string",
            "format": "uuid",
            "description": "Space ID to associate the bet with"
          }
        },
        "required": ["name", "target_date"],
        "examples": [
          {
            "name": "Increase user engagement by 40%",
            "description": "Implement new onboarding flow and gamification elements",
            "target_date": "2024-06-30T23:59:59Z",
            "status_id": 1,
            "priority_id": 2,
            "icon_id": 1,
            "ownBet": true,
            "space_id": "space-uuid-here"
          }
        ]
      },
      "UpdateBetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated bet name",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Updated description"
          },
          "status_id": {
            "type": "integer",
            "description": "Updated status ID"
          },
          "priority_id": {
            "type": "integer",
            "description": "Updated priority ID"
          },
          "icon_id": {
            "type": "integer",
            "description": "Updated icon ID"
          },
          "target_date": {
            "type": "string",
            "format": "date-time",
            "description": "Updated target date (ISO 8601)"
          },
          "owner_id": {
            "type": "string",
            "format": "uuid",
            "description": "Updated owner ID"
          }
        }
      },
      "TaskComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Comment ID"
          },
          "task_id": {
            "type": "string",
            "format": "uuid",
            "description": "Task ID"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created comment"
          },
          "content": {
            "type": "object",
            "description": "Comment content in JSONB format",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["text"]
              },
              "text": {
                "type": "string",
                "description": "Comment text content"
              }
            }
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of mentioned user IDs"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent comment ID for threading"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether comment is deleted"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TasksListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "SimilarTaskPair": {
        "type": "object",
        "properties": {
          "task1": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "similarity_score": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          "task2": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "similarity_score": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          "matching_elements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SimilarTasksResponse": {
        "type": "object",
        "properties": {
          "similarPairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimilarTaskPair"
            }
          }
        }
      },
      "Insight": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique insight identifier"
          },
          "name": {
            "type": "string",
            "description": "Clear, descriptive insight name"
          },
          "direct_quote": {
            "type": "string",
            "description": "Exact quote or direct statement that led to this insight"
          },
          "details": {
            "type": "string",
            "description": "Detailed description and context for the insight"
          },
          "type_id": {
            "type": "integer",
            "description": "Insight type ID"
          },
          "priority_id": {
            "type": "integer",
            "description": "Insight priority ID"
          },
          "status_id": {
            "type": "integer",
            "description": "Insight status ID"
          },
          "type": {
            "$ref": "#/components/schemas/InsightType"
          },
          "priority": {
            "$ref": "#/components/schemas/InsightPriority"
          },
          "status": {
            "$ref": "#/components/schemas/InsightStatus"
          },
          "person": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Person ID"
              },
              "full_name": {
                "type": "string",
                "description": "Person's full name"
              }
            }
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of user who created the insight"
          },
          "space_id": {
            "type": "string",
            "format": "uuid",
            "description": "Workspace/space ID"
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of person who provided the insight"
          },
          "source_bot_id": {
            "type": "string",
            "description": "Bot ID if insight was extracted from a meeting"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether insight is disabled"
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Connected task ID"
                },
                "name": {
                  "type": "string",
                  "description": "Connected task name"
                },
                "status_id": {
                  "type": "integer",
                  "description": "Connected task status ID"
                }
              }
            },
            "description": "Array of connected tasks"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Insight creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Insight last update timestamp"
          }
        }
      },
      "InsightType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Type ID"
          },
          "name": {
            "type": "string",
            "description": "Type name",
            "enum": ["User Feedback", "Performance Insight", "Issue Identification", "Feature Request", "Strategic Decision"]
          },
          "description": {
            "type": "string",
            "description": "Type description"
          }
        }
      },
      "InsightPriority": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Priority ID"
          },
          "name": {
            "type": "string",
            "description": "Priority name",
            "enum": ["low", "medium", "high", "critical"]
          }
        }
      },
      "InsightStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Status ID"
          },
          "name": {
            "type": "string",
            "description": "Status name",
            "enum": ["new", "reviewed", "actioned"]
          }
        }
      },
      "InsightsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Response success status"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Insight"
            },
            "description": "Array of insights"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique organization identifier"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "type_id": {
            "type": "integer",
            "description": "Organization type ID"
          },
          "type": {
            "$ref": "#/components/schemas/OrganizationType"
          },
          "domain": {
            "type": "string",
            "description": "Organization's primary domain"
          },
          "source": {
            "$ref": "#/components/schemas/OrganizationSource"
          },
          "space_id": {
            "type": "string",
            "format": "uuid",
            "description": "Workspace/space ID"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created the organization"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Organization creation timestamp"
          },
          "people_count": {
            "type": "integer",
            "description": "Number of people associated with this organization"
          },
          "recent_meetings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Meeting ID"
                },
                "title": {
                  "type": "string",
                  "description": "Meeting title"
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Meeting date"
                }
              }
            },
            "description": "Array of recent meetings involving this organization"
          }
        }
      },
      "OrganizationType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Type ID"
          },
          "name": {
            "type": "string",
            "description": "Type name",
            "enum": ["Company", "Client", "Partner", "Vendor", "Educational", "Non-profit"]
          },
          "description": {
            "type": "string",
            "description": "Type description"
          }
        }
      },
      "OrganizationSource": {
        "type": "object",
        "properties": {
          "platform": {
            "type": "string",
            "enum": ["meeting_extraction", "manual", "import"],
            "description": "Source platform where organization was discovered"
          },
          "meeting_id": {
            "type": "string",
            "description": "Meeting UUID if extracted from meeting"
          },
          "extracted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Extraction timestamp"
          },
          "created_by": {
            "type": "string",
            "description": "User identifier for manual creation"
          }
        }
      },
      "OrganizationPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Person ID"
          },
          "full_name": {
            "type": "string",
            "description": "Person's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Person's email address"
          },
          "title": {
            "type": "string",
            "description": "Person's job title"
          },
          "phone_number": {
            "type": "string",
            "description": "Person's phone number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Person creation timestamp"
          }
        }
      },
      "OrganizationsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Response success status"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "description": "Array of organizations"
          }
        }
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Response success status"
          },
          "data": {
            "$ref": "#/components/schemas/Organization"
          }
        }
      },
      "OrganizationTypesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Response success status"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationType"
            },
            "description": "Array of organization types"
          }
        }
      },
      "OrganizationPeopleResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Response success status"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationPerson"
            },
            "description": "Array of people associated with the organization"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "JWT token from Supabase authentication"
      }
    }
  }
}